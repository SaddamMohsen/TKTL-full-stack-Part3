{"version":3,"sources":["Services/person.js","Components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","catch","error","console","log","delete","resp","statusText","Notification","message","style","color","fontStyle","background","fontSize","borderstyle","borderradius","padding","marginbottom","Filter","props","htmlFor","type","value","values","onChange","InputFrom","val","required","PersonForm","onSubmit","addPerson","newName","onAddName","newNumber","onAddNumber","Persons","persons","filter","isSearched","searchName","map","per","key","person","deletePerson","deleteInput","Person","name","number","onClick","App","useState","setPersons","setNewName","setNewNumber","setSearchName","errorMessage","setErrorMessage","useEffect","personServices","initperson","event","target","preventDefault","obj","flag","names","toLowerCase","indexOf","isAdded","pers","find","window","confirm","changedPers","updateObj","alert","createdObj","concat","setTimeout","SearchTerm","item","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f73942f.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/person'\r\n\r\n\r\nconst getAll=()=>{\r\n    const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n  .catch(error=>{\r\n    console.log('fail')\r\n  })\r\n}\r\nconst deleteInput=(id)=>{\r\n   const request=axios.delete(`${baseUrl}/${id}`)\r\n     request.then(resp=>{\r\n         console.log(resp.statusText)\r\n     })\r\n}\r\n\r\n\r\nexport default {getAll,create,update,deleteInput}\r\n\r\n","import React from 'react'\r\n\r\nconst Notification=({message})=>{\r\n    const msgstyle={\r\n         color: 'green',\r\n        fontStyle:'italic',\r\n       \r\n       background: 'lightgrey',\r\n  fontSize: 20,\r\n  borderstyle: 'solid',\r\n  borderradius: 5,\r\n  padding: 10,\r\n  marginbottom: 10\r\n}\r\n    \r\n    \r\n    if(message===null)\r\n    {return null}\r\n     \r\n     return(\r\n    <div style={msgstyle}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n     \r\n\r\n\r\n     \r\nexport default Notification;","import React, { useState,useEffect } from 'react'\r\nimport personServices from './Services/person'\r\nimport Notification from './Components/Notification'\r\n//component to filter show based on input value\r\nconst Filter=(props)=>{\r\n return(\r\n   <div>\r\n   <form>\r\n          <label htmlFor=\"name\" >Filter Shown By Name</label>\r\n            <input type=\"text\" id=\"name\"\r\n              value={props.values}\r\n              onChange={props.onChange}/>\r\n      </form>\r\n   </div>\r\n\r\n )\r\n}\r\n\r\nconst InputFrom=(props)=>{\r\n  return(\r\n    <div>\r\n    <input value={props.val} onChange={props.onChange} required/>\r\n    </div>\r\n  )\r\n}\r\n//components to input new Person\r\nconst PersonForm=(props)=>{\r\n\r\n  return(\r\n    <form onSubmit={props.addPerson}>\r\n        <div>\r\n          name:   <InputFrom val={props.newName} onChange={props.onAddName} />\r\n          number: <InputFrom val={props.newNumber}  onChange={props.onAddNumber} />\r\n                  <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>)\r\n}\r\n\r\n//component to show all person detaile\r\nconst Persons=(props)=>{\r\n  return(\r\n   props.persons.filter(props.isSearched(props.searchName)).map(per=>\r\n   <div key={per.id}>\r\n   <Person\r\n      person={per}\r\n      deletePerson={props.deleteInput}\r\n      />\r\n      </div>\r\n   )\r\n  )\r\n}\r\n\r\n//Component to show One person detaile\r\nconst Person=({person,deletePerson})=>{\r\n  return(\r\n    <div key={person.id}>\r\n     {person.name}\r\n     {person.number}\r\n     <button onClick={()=>deletePerson(person.id)}>deleteContact</button>\r\n    </div>\r\n  )\r\n\r\n}\r\nconst App = () => {\r\n  const [persons,setPersons] = useState([])\r\n  const [newName,setNewName] = useState('')\r\n  const [newNumber,setNewNumber]=useState('')\r\n  const [searchName,setSearchName]=useState('')\r\n  const [errorMessage,setErrorMessage]=useState('')\r\n\r\nuseEffect(()=>{\r\n   personServices\r\n    .getAll()\r\n    .then(initperson => {\r\n      setPersons(initperson)\r\n    })\r\n}, [])\r\n\r\n\r\n// this function is used to check whether the new name is added already or not \r\n//if the new name is not found it return true otherwise it return false\r\nconst isAdded = () =>{\r\n   let flag=false\r\n   //let id =0\r\n  persons.filter(names=>{\r\n    if(names.name.toLowerCase().indexOf(newName.toLowerCase()) !==-1)\r\n          {flag=true}\r\n            return flag });\r\n    return flag }\r\n\r\n//this function used to add new person into the persons array\r\nconst addPerson=(event)=>{ \r\n  event.preventDefault()\r\n   const obj={ \r\n     name:newName,\r\n     number:newNumber}\r\n      \r\n       if(!isAdded())\r\n       {\r\n         personServices\r\n             .create(obj)\r\n               .then(createdObj => {\r\n                 console.log(createdObj)\r\n                setPersons(persons.concat(createdObj))\r\n                setNewName('')\r\n                 setNewNumber('')\r\n                 setErrorMessage(`${newName}  is added Successfully`)\r\n                         setTimeout(() => {setErrorMessage(null)}, 5000)\r\n                 \r\n      })\r\n       }\r\n       else{\r\n         const pers=persons.find(name=>name.name===newName)\r\n         if(pers.number!==newNumber)\r\n         {\r\n           if(!window.confirm(`${pers.name}is added to phonebook ,Replace the old Number with this?`)) {\r\n             return\r\n           }\r\n           else{\r\n             const changedPers={...pers,number:newNumber}\r\n               personServices\r\n               .update(pers.id,changedPers)\r\n                .then(updateObj=>{\r\n                  setPersons(persons.map(per=>per.id!==pers.id?per:changedPers))\r\n                  setNewName('')\r\n                  setNewNumber('')\r\n                })\r\n           }\r\n         }\r\n         else\r\n          alert(newName +' is already added to phonebook')\r\n       }\r\n}\r\n\r\n//function that is used be to seach\r\nconst isSearched = SearchTerm => item =>\r\n    item.name.toLowerCase().indexOf(SearchTerm.toLowerCase()) !== -1;\r\n    \r\nconst addName=(event)=>setNewName(event.target.value)\r\nconst addNumber=(event)=>setNewNumber(event.target.value) \r\nconst onChangeSearch=(event)=>setSearchName(event.target.value)\r\n//function that delete input based on id\r\nconst deleteInput=(id)=>{\r\n//console.log('Id to be deleted is :',id)\r\nif(!window.confirm(\"Are you sure you want to delete this?\")) {\r\nreturn\r\n}\r\n  const person=persons.filter(per=>per.id !==id)\r\n   personServices\r\n    .deleteInput(id)\r\n    setPersons(person)\r\n}\r\n\r\n  return (\r\n    <div>\r\n     <h1><Notification message={errorMessage}/></h1>\r\n      <h2>Phonebook</h2>\r\n      <Filter values={searchName}\r\n              onChange={onChangeSearch}\r\n              />\r\n      <h2>Add New</h2>\r\n      <PersonForm \r\n            addPerson={addPerson}\r\n            newName={newName}\r\n            newNumber={newNumber}\r\n            onAddName={addName}\r\n            onAddNumber={addNumber}\r\n          />\r\n                           \r\n      <h2>Numbers</h2>\r\n      <Persons\r\n          persons={persons}\r\n          isSearched={isSearched}\r\n          searchName={searchName}\r\n          deleteInput={deleteInput}\r\n          />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n    module.hot.accept();\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}